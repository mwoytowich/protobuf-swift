// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers


public func == (lhs: PBUser, rhs: PBUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGroup == rhs.hasGroup) && (!lhs.hasGroup || lhs.group == rhs.group)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBGroup, rhs: PBGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOwner == rhs.hasOwner) && (!lhs.hasOwner || lhs.owner == rhs.owner)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBPerfomanceBatch, rhs: PBPerfomanceBatch) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.batch == rhs.batch)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBPerfomance, rhs: PBPerfomance) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInts == rhs.hasInts) && (!lhs.hasInts || lhs.ints == rhs.ints)
  fieldCheck = fieldCheck && (lhs.hasInts64 == rhs.hasInts64) && (!lhs.hasInts64 || lhs.ints64 == rhs.ints64)
  fieldCheck = fieldCheck && (lhs.hasDoubles == rhs.hasDoubles) && (!lhs.hasDoubles || lhs.doubles == rhs.doubles)
  fieldCheck = fieldCheck && (lhs.hasFloats == rhs.hasFloats) && (!lhs.hasFloats || lhs.floats == rhs.floats)
  fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
  fieldCheck = fieldCheck && (lhs.hasBytes == rhs.hasBytes) && (!lhs.hasBytes || lhs.bytes == rhs.bytes)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBProtoPoint, rhs: PBProtoPoint) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBIceCreamCone, rhs: PBIceCreamCone) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasScoops == rhs.hasScoops) && (!lhs.hasScoops || lhs.scoops == rhs.scoops)
  fieldCheck = fieldCheck && (lhs.hasFlavor == rhs.hasFlavor) && (!lhs.hasFlavor || lhs.flavor == rhs.flavor)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public struct PerformanceRoot {
  public static var sharedInstance : PerformanceRoot {
   struct Static {
       static let instance : PerformanceRoot = PerformanceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    Google.Protobuf.SwiftDescriptorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final public class PBUser : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasGroup:Bool = false
  public private(set) var group:PBGroup!
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasGroup {
      output.writeMessage(1, value:group)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasGroup {
        if let varSizegroup = group?.computeMessageSize(1) {
            serialize_size += varSizegroup
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBUser {
    return PBUser.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBUser {
    return PBUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBUser {
    return PBUser.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBUser {
    return PBUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBUser {
    return PBUser.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUser {
    return PBUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBUserBuilder {
    return PBUser.classBuilder() as! PBUserBuilder
  }
  public func builder() -> PBUserBuilder {
    return classBuilder() as! PBUserBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBUserBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBUser.builder()
  }
  public func toBuilder() -> PBUserBuilder {
    return PBUser.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBUser) -> PBUserBuilder {
    return PBUser.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasGroup {
      output += "\(indent) group {\n"
      group?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasGroup {
              if let hashValuegroup = group?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuegroup
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBUser"
  }
  override public func className() -> String {
      return "PBUser"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBUser.self
  }
  //Meta information declaration end

}

final public class PBUserBuilder : GeneratedMessageBuilder {
  private var builderResult:PBUser

  required override public init () {
     builderResult = PBUser()
     super.init()
  }
  public var hasGroup:Bool {
       get {
           return builderResult.hasGroup
       }
  }
  public var group:PBGroup! {
       get {
           return builderResult.group
       }
       set (value) {
           builderResult.hasGroup = true
           builderResult.group = value
       }
  }
  public func setGroup(value:PBGroup!)-> PBUserBuilder {
    self.group = value
    return self
  }
  public func mergeGroup(value:PBGroup) -> PBUserBuilder {
    if (builderResult.hasGroup) {
      builderResult.group = PBGroup.builderWithPrototype(builderResult.group).mergeFrom(value).buildPartial()
    } else {
      builderResult.group = value
    }
    builderResult.hasGroup = true
    return self
  }
  public func clearGroup() -> PBUserBuilder {
    builderResult.hasGroup = false
    builderResult.group = nil
    return self
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> PBUserBuilder {
    builderResult = PBUser()
    return self
  }
  public override func clone() -> PBUserBuilder {
    return PBUser.builderWithPrototype(builderResult)
  }
  public override func build() -> PBUser {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> PBUser {
    var returnMe:PBUser = builderResult
    return returnMe
  }
  public func mergeFrom(other:PBUser) -> PBUserBuilder {
    if (other == PBUser()) {
     return self
    }
    if (other.hasGroup) {
        mergeGroup(other.group)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->PBUserBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUserBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:PBGroupBuilder = PBGroup.builder()
        if hasGroup {
          subBuilder.mergeFrom(group)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        group = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PBGroup : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasOwner:Bool = false
  public private(set) var owner:PBUser!
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOwner {
      output.writeMessage(1, value:owner)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasOwner {
        if let varSizeowner = owner?.computeMessageSize(1) {
            serialize_size += varSizeowner
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBGroup {
    return PBGroup.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBGroup {
    return PBGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBGroup {
    return PBGroup.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBGroup {
    return PBGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBGroup {
    return PBGroup.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBGroup {
    return PBGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBGroupBuilder {
    return PBGroup.classBuilder() as! PBGroupBuilder
  }
  public func builder() -> PBGroupBuilder {
    return classBuilder() as! PBGroupBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBGroupBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBGroup.builder()
  }
  public func toBuilder() -> PBGroupBuilder {
    return PBGroup.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBGroup) -> PBGroupBuilder {
    return PBGroup.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasOwner {
      output += "\(indent) owner {\n"
      owner?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasOwner {
              if let hashValueowner = owner?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueowner
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBGroup"
  }
  override public func className() -> String {
      return "PBGroup"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBGroup.self
  }
  //Meta information declaration end

}

final public class PBGroupBuilder : GeneratedMessageBuilder {
  private var builderResult:PBGroup

  required override public init () {
     builderResult = PBGroup()
     super.init()
  }
  public var hasOwner:Bool {
       get {
           return builderResult.hasOwner
       }
  }
  public var owner:PBUser! {
       get {
           return builderResult.owner
       }
       set (value) {
           builderResult.hasOwner = true
           builderResult.owner = value
       }
  }
  public func setOwner(value:PBUser!)-> PBGroupBuilder {
    self.owner = value
    return self
  }
  public func mergeOwner(value:PBUser) -> PBGroupBuilder {
    if (builderResult.hasOwner) {
      builderResult.owner = PBUser.builderWithPrototype(builderResult.owner).mergeFrom(value).buildPartial()
    } else {
      builderResult.owner = value
    }
    builderResult.hasOwner = true
    return self
  }
  public func clearOwner() -> PBGroupBuilder {
    builderResult.hasOwner = false
    builderResult.owner = nil
    return self
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> PBGroupBuilder {
    builderResult = PBGroup()
    return self
  }
  public override func clone() -> PBGroupBuilder {
    return PBGroup.builderWithPrototype(builderResult)
  }
  public override func build() -> PBGroup {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> PBGroup {
    var returnMe:PBGroup = builderResult
    return returnMe
  }
  public func mergeFrom(other:PBGroup) -> PBGroupBuilder {
    if (other == PBGroup()) {
     return self
    }
    if (other.hasOwner) {
        mergeOwner(other.owner)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->PBGroupBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBGroupBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:PBUserBuilder = PBUser.builder()
        if hasOwner {
          subBuilder.mergeFrom(owner)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        owner = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PBPerfomanceBatch : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var batch:Array<PBPerfomance>  = Array<PBPerfomance>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    var isInitbatch:Bool = true
    for oneElementbatch in batch {
        if (!oneElementbatch.isInitialized()) {
            isInitbatch = false
            break 
        }
    }
    if !isInitbatch {
     return isInitbatch
     }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementbatch in batch {
        output.writeMessage(1, value:oneElementbatch)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    for oneElementbatch in batch {
        serialize_size += oneElementbatch.computeMessageSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBPerfomanceBatchBuilder {
    return PBPerfomanceBatch.classBuilder() as! PBPerfomanceBatchBuilder
  }
  public func builder() -> PBPerfomanceBatchBuilder {
    return classBuilder() as! PBPerfomanceBatchBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBPerfomanceBatchBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBPerfomanceBatch.builder()
  }
  public func toBuilder() -> PBPerfomanceBatchBuilder {
    return PBPerfomanceBatch.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBPerfomanceBatch) -> PBPerfomanceBatchBuilder {
    return PBPerfomanceBatch.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    var batchElementIndex:Int = 0
    for oneElementbatch in batch {
        output += "\(indent) batch[\(batchElementIndex)] {\n"
        oneElementbatch.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        batchElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementbatch in batch {
              hashCode = (hashCode &* 31) &+ oneElementbatch.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBPerfomanceBatch"
  }
  override public func className() -> String {
      return "PBPerfomanceBatch"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBPerfomanceBatch.self
  }
  //Meta information declaration end

}

final public class PBPerfomanceBatchBuilder : GeneratedMessageBuilder {
  private var builderResult:PBPerfomanceBatch

  required override public init () {
     builderResult = PBPerfomanceBatch()
     super.init()
  }
  public var batch:Array<PBPerfomance> {
       get {
           return builderResult.batch
       }
       set (value) {
           builderResult.batch = value
       }
  }
  public func setBatch(value:Array<PBPerfomance>)-> PBPerfomanceBatchBuilder {
    self.batch = value
    return self
  }
  public func clearBatch() -> PBPerfomanceBatchBuilder {
    builderResult.batch.removeAll(keepCapacity: false)
    return self
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> PBPerfomanceBatchBuilder {
    builderResult = PBPerfomanceBatch()
    return self
  }
  public override func clone() -> PBPerfomanceBatchBuilder {
    return PBPerfomanceBatch.builderWithPrototype(builderResult)
  }
  public override func build() -> PBPerfomanceBatch {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> PBPerfomanceBatch {
    var returnMe:PBPerfomanceBatch = builderResult
    return returnMe
  }
  public func mergeFrom(other:PBPerfomanceBatch) -> PBPerfomanceBatchBuilder {
    if (other == PBPerfomanceBatch()) {
     return self
    }
    if !other.batch.isEmpty  {
       builderResult.batch += other.batch
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->PBPerfomanceBatchBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBatchBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = PBPerfomance.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        batch += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PBPerfomance : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasInts:Bool = false
  public private(set) var ints:Int32 = Int32(0)

  public private(set) var hasInts64:Bool = false
  public private(set) var ints64:Int64 = Int64(0)

  public private(set) var hasDoubles:Bool = false
  public private(set) var doubles:Double = Double(0)

  public private(set) var hasFloats:Bool = false
  public private(set) var floats:Float = Float(0)

  public private(set) var hasStr:Bool = false
  public private(set) var str:String = ""

  public private(set) var hasBytes:Bool = false
  public private(set) var bytes:NSData = NSData()

  public private(set) var hasDescription:Bool = false
  public private(set) var description_:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasInts {
      return false
    }
    if !hasInts64 {
      return false
    }
    if !hasDoubles {
      return false
    }
    if !hasFloats {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasInts {
      output.writeInt32(1, value:ints)
    }
    if hasInts64 {
      output.writeInt64(2, value:ints64)
    }
    if hasDoubles {
      output.writeDouble(3, value:doubles)
    }
    if hasFloats {
      output.writeFloat(4, value:floats)
    }
    if hasStr {
      output.writeString(5, value:str)
    }
    if hasBytes {
      output.writeData(6, value:bytes)
    }
    if hasDescription {
      output.writeString(7, value:description_)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasInts {
      serialize_size += ints.computeInt32Size(1)
    }
    if hasInts64 {
      serialize_size += ints64.computeInt64Size(2)
    }
    if hasDoubles {
      serialize_size += doubles.computeDoubleSize(3)
    }
    if hasFloats {
      serialize_size += floats.computeFloatSize(4)
    }
    if hasStr {
      serialize_size += str.computeStringSize(5)
    }
    if hasBytes {
      serialize_size += bytes.computeDataSize(6)
    }
    if hasDescription {
      serialize_size += description_.computeStringSize(7)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBPerfomance {
    return PBPerfomance.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBPerfomanceBuilder {
    return PBPerfomance.classBuilder() as! PBPerfomanceBuilder
  }
  public func builder() -> PBPerfomanceBuilder {
    return classBuilder() as! PBPerfomanceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBPerfomanceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBPerfomance.builder()
  }
  public func toBuilder() -> PBPerfomanceBuilder {
    return PBPerfomance.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBPerfomance) -> PBPerfomanceBuilder {
    return PBPerfomance.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasInts {
      output += "\(indent) ints: \(ints) \n"
    }
    if hasInts64 {
      output += "\(indent) ints64: \(ints64) \n"
    }
    if hasDoubles {
      output += "\(indent) doubles: \(doubles) \n"
    }
    if hasFloats {
      output += "\(indent) floats: \(floats) \n"
    }
    if hasStr {
      output += "\(indent) str: \(str) \n"
    }
    if hasBytes {
      output += "\(indent) bytes: \(bytes) \n"
    }
    if hasDescription {
      output += "\(indent) description_: \(description_) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasInts {
             hashCode = (hashCode &* 31) &+ ints.hashValue
          }
          if hasInts64 {
             hashCode = (hashCode &* 31) &+ ints64.hashValue
          }
          if hasDoubles {
             hashCode = (hashCode &* 31) &+ doubles.hashValue
          }
          if hasFloats {
             hashCode = (hashCode &* 31) &+ floats.hashValue
          }
          if hasStr {
             hashCode = (hashCode &* 31) &+ str.hashValue
          }
          if hasBytes {
             hashCode = (hashCode &* 31) &+ bytes.hashValue
          }
          if hasDescription {
             hashCode = (hashCode &* 31) &+ description_.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBPerfomance"
  }
  override public func className() -> String {
      return "PBPerfomance"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBPerfomance.self
  }
  //Meta information declaration end

}

final public class PBPerfomanceBuilder : GeneratedMessageBuilder {
  private var builderResult:PBPerfomance

  required override public init () {
     builderResult = PBPerfomance()
     super.init()
  }
  public var hasInts:Bool {
       get {
            return builderResult.hasInts
       }
  }
  public var ints:Int32 {
       get {
            return builderResult.ints
       }
       set (value) {
           builderResult.hasInts = true
           builderResult.ints = value
       }
  }
  public func setInts(value:Int32)-> PBPerfomanceBuilder {
    self.ints = value
    return self
  }
  public func clearInts() -> PBPerfomanceBuilder{
       builderResult.hasInts = false
       builderResult.ints = Int32(0)
       return self
  }
  public var hasInts64:Bool {
       get {
            return builderResult.hasInts64
       }
  }
  public var ints64:Int64 {
       get {
            return builderResult.ints64
       }
       set (value) {
           builderResult.hasInts64 = true
           builderResult.ints64 = value
       }
  }
  public func setInts64(value:Int64)-> PBPerfomanceBuilder {
    self.ints64 = value
    return self
  }
  public func clearInts64() -> PBPerfomanceBuilder{
       builderResult.hasInts64 = false
       builderResult.ints64 = Int64(0)
       return self
  }
  public var hasDoubles:Bool {
       get {
            return builderResult.hasDoubles
       }
  }
  public var doubles:Double {
       get {
            return builderResult.doubles
       }
       set (value) {
           builderResult.hasDoubles = true
           builderResult.doubles = value
       }
  }
  public func setDoubles(value:Double)-> PBPerfomanceBuilder {
    self.doubles = value
    return self
  }
  public func clearDoubles() -> PBPerfomanceBuilder{
       builderResult.hasDoubles = false
       builderResult.doubles = Double(0)
       return self
  }
  public var hasFloats:Bool {
       get {
            return builderResult.hasFloats
       }
  }
  public var floats:Float {
       get {
            return builderResult.floats
       }
       set (value) {
           builderResult.hasFloats = true
           builderResult.floats = value
       }
  }
  public func setFloats(value:Float)-> PBPerfomanceBuilder {
    self.floats = value
    return self
  }
  public func clearFloats() -> PBPerfomanceBuilder{
       builderResult.hasFloats = false
       builderResult.floats = Float(0)
       return self
  }
  public var hasStr:Bool {
       get {
            return builderResult.hasStr
       }
  }
  public var str:String {
       get {
            return builderResult.str
       }
       set (value) {
           builderResult.hasStr = true
           builderResult.str = value
       }
  }
  public func setStr(value:String)-> PBPerfomanceBuilder {
    self.str = value
    return self
  }
  public func clearStr() -> PBPerfomanceBuilder{
       builderResult.hasStr = false
       builderResult.str = ""
       return self
  }
  public var hasBytes:Bool {
       get {
            return builderResult.hasBytes
       }
  }
  public var bytes:NSData {
       get {
            return builderResult.bytes
       }
       set (value) {
           builderResult.hasBytes = true
           builderResult.bytes = value
       }
  }
  public func setBytes(value:NSData)-> PBPerfomanceBuilder {
    self.bytes = value
    return self
  }
  public func clearBytes() -> PBPerfomanceBuilder{
       builderResult.hasBytes = false
       builderResult.bytes = NSData()
       return self
  }
  public var hasDescription:Bool {
       get {
            return builderResult.hasDescription
       }
  }
  public var description_:String {
       get {
            return builderResult.description_
       }
       set (value) {
           builderResult.hasDescription = true
           builderResult.description_ = value
       }
  }
  public func setDescription(value:String)-> PBPerfomanceBuilder {
    self.description_ = value
    return self
  }
  public func clearDescription() -> PBPerfomanceBuilder{
       builderResult.hasDescription = false
       builderResult.description_ = ""
       return self
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> PBPerfomanceBuilder {
    builderResult = PBPerfomance()
    return self
  }
  public override func clone() -> PBPerfomanceBuilder {
    return PBPerfomance.builderWithPrototype(builderResult)
  }
  public override func build() -> PBPerfomance {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> PBPerfomance {
    var returnMe:PBPerfomance = builderResult
    return returnMe
  }
  public func mergeFrom(other:PBPerfomance) -> PBPerfomanceBuilder {
    if (other == PBPerfomance()) {
     return self
    }
    if other.hasInts {
         ints = other.ints
    }
    if other.hasInts64 {
         ints64 = other.ints64
    }
    if other.hasDoubles {
         doubles = other.doubles
    }
    if other.hasFloats {
         floats = other.floats
    }
    if other.hasStr {
         str = other.str
    }
    if other.hasBytes {
         bytes = other.bytes
    }
    if other.hasDescription {
         description_ = other.description_
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->PBPerfomanceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        ints = input.readInt32()

      case 16 :
        ints64 = input.readInt64()

      case 25 :
        doubles = input.readDouble()

      case 37 :
        floats = input.readFloat()

      case 42 :
        str = input.readString()

      case 50 :
        bytes = input.readData()

      case 58 :
        description_ = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PBProtoPoint : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasLatitude:Bool = false
  public private(set) var latitude:Float = Float(0)

  public private(set) var hasLongitude:Bool = false
  public private(set) var longitude:Float = Float(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasLatitude {
      return false
    }
    if !hasLongitude {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasLatitude {
      output.writeFloat(1, value:latitude)
    }
    if hasLongitude {
      output.writeFloat(2, value:longitude)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasLatitude {
      serialize_size += latitude.computeFloatSize(1)
    }
    if hasLongitude {
      serialize_size += longitude.computeFloatSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBProtoPoint {
    return PBProtoPoint.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBProtoPointBuilder {
    return PBProtoPoint.classBuilder() as! PBProtoPointBuilder
  }
  public func builder() -> PBProtoPointBuilder {
    return classBuilder() as! PBProtoPointBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBProtoPointBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBProtoPoint.builder()
  }
  public func toBuilder() -> PBProtoPointBuilder {
    return PBProtoPoint.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBProtoPoint) -> PBProtoPointBuilder {
    return PBProtoPoint.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasLatitude {
      output += "\(indent) latitude: \(latitude) \n"
    }
    if hasLongitude {
      output += "\(indent) longitude: \(longitude) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLatitude {
             hashCode = (hashCode &* 31) &+ latitude.hashValue
          }
          if hasLongitude {
             hashCode = (hashCode &* 31) &+ longitude.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBProtoPoint"
  }
  override public func className() -> String {
      return "PBProtoPoint"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBProtoPoint.self
  }
  //Meta information declaration end

}

final public class PBProtoPointBuilder : GeneratedMessageBuilder {
  private var builderResult:PBProtoPoint

  required override public init () {
     builderResult = PBProtoPoint()
     super.init()
  }
  public var hasLatitude:Bool {
       get {
            return builderResult.hasLatitude
       }
  }
  public var latitude:Float {
       get {
            return builderResult.latitude
       }
       set (value) {
           builderResult.hasLatitude = true
           builderResult.latitude = value
       }
  }
  public func setLatitude(value:Float)-> PBProtoPointBuilder {
    self.latitude = value
    return self
  }
  public func clearLatitude() -> PBProtoPointBuilder{
       builderResult.hasLatitude = false
       builderResult.latitude = Float(0)
       return self
  }
  public var hasLongitude:Bool {
       get {
            return builderResult.hasLongitude
       }
  }
  public var longitude:Float {
       get {
            return builderResult.longitude
       }
       set (value) {
           builderResult.hasLongitude = true
           builderResult.longitude = value
       }
  }
  public func setLongitude(value:Float)-> PBProtoPointBuilder {
    self.longitude = value
    return self
  }
  public func clearLongitude() -> PBProtoPointBuilder{
       builderResult.hasLongitude = false
       builderResult.longitude = Float(0)
       return self
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> PBProtoPointBuilder {
    builderResult = PBProtoPoint()
    return self
  }
  public override func clone() -> PBProtoPointBuilder {
    return PBProtoPoint.builderWithPrototype(builderResult)
  }
  public override func build() -> PBProtoPoint {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> PBProtoPoint {
    var returnMe:PBProtoPoint = builderResult
    return returnMe
  }
  public func mergeFrom(other:PBProtoPoint) -> PBProtoPointBuilder {
    if (other == PBProtoPoint()) {
     return self
    }
    if other.hasLatitude {
         latitude = other.latitude
    }
    if other.hasLongitude {
         longitude = other.longitude
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->PBProtoPointBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBProtoPointBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 13 :
        latitude = input.readFloat()

      case 21 :
        longitude = input.readFloat()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PBIceCreamCone : GeneratedMessage, GeneratedMessageProtocol, Hashable {


    //Enum type declaration start 

    public enum PBFlavor:Int32 {
      case Chocolate = 1
      case Vanilla = 2

    }

    //Enum type declaration end 

  public private(set) var hasScoops:Bool = false
  public private(set) var scoops:Int32 = Int32(0)

  public private(set) var flavor:PBIceCreamCone.PBFlavor = PBIceCreamCone.PBFlavor.Chocolate
  public private(set) var hasFlavor:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasScoops {
      output.writeInt32(1, value:scoops)
    }
    if hasFlavor {
      output.writeEnum(2, value:flavor.rawValue)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasScoops {
      serialize_size += scoops.computeInt32Size(1)
    }
    if (hasFlavor) {
      serialize_size += flavor.rawValue.computeEnumSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBIceCreamConeBuilder {
    return PBIceCreamCone.classBuilder() as! PBIceCreamConeBuilder
  }
  public func builder() -> PBIceCreamConeBuilder {
    return classBuilder() as! PBIceCreamConeBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBIceCreamConeBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBIceCreamCone.builder()
  }
  public func toBuilder() -> PBIceCreamConeBuilder {
    return PBIceCreamCone.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBIceCreamCone) -> PBIceCreamConeBuilder {
    return PBIceCreamCone.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasScoops {
      output += "\(indent) scoops: \(scoops) \n"
    }
    if (hasFlavor) {
      output += "\(indent) flavor: \(flavor.rawValue)\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasScoops {
             hashCode = (hashCode &* 31) &+ scoops.hashValue
          }
          if hasFlavor {
             hashCode = (hashCode &* 31) &+ Int(flavor.rawValue)
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBIceCreamCone"
  }
  override public func className() -> String {
      return "PBIceCreamCone"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBIceCreamCone.self
  }
  //Meta information declaration end

}

final public class PBIceCreamConeBuilder : GeneratedMessageBuilder {
  private var builderResult:PBIceCreamCone

  required override public init () {
     builderResult = PBIceCreamCone()
     super.init()
  }
  public var hasScoops:Bool {
       get {
            return builderResult.hasScoops
       }
  }
  public var scoops:Int32 {
       get {
            return builderResult.scoops
       }
       set (value) {
           builderResult.hasScoops = true
           builderResult.scoops = value
       }
  }
  public func setScoops(value:Int32)-> PBIceCreamConeBuilder {
    self.scoops = value
    return self
  }
  public func clearScoops() -> PBIceCreamConeBuilder{
       builderResult.hasScoops = false
       builderResult.scoops = Int32(0)
       return self
  }
    public var hasFlavor:Bool{
        get {
            return builderResult.hasFlavor
        }
    }
    public var flavor:PBIceCreamCone.PBFlavor {
        get {
            return builderResult.flavor
        }
        set (value) {
            builderResult.hasFlavor = true
            builderResult.flavor = value
        }
    }
    public func setFlavor(value:PBIceCreamCone.PBFlavor)-> PBIceCreamConeBuilder {
      self.flavor = value
      return self
    }
    public func clearFlavor() -> PBIceCreamConeBuilder {
       builderResult.hasFlavor = false
       builderResult.flavor = .Chocolate
       return self
    }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> PBIceCreamConeBuilder {
    builderResult = PBIceCreamCone()
    return self
  }
  public override func clone() -> PBIceCreamConeBuilder {
    return PBIceCreamCone.builderWithPrototype(builderResult)
  }
  public override func build() -> PBIceCreamCone {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> PBIceCreamCone {
    var returnMe:PBIceCreamCone = builderResult
    return returnMe
  }
  public func mergeFrom(other:PBIceCreamCone) -> PBIceCreamConeBuilder {
    if (other == PBIceCreamCone()) {
     return self
    }
    if other.hasScoops {
         scoops = other.scoops
    }
    if other.hasFlavor {
         flavor = other.flavor
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->PBIceCreamConeBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamConeBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        scoops = input.readInt32()

      case 16 :
        let valueIntflavor = input.readEnum()
        if let enumsflavor = PBIceCreamCone.PBFlavor(rawValue:valueIntflavor){
             flavor = enumsflavor
        } else {
             unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntflavor))
        }

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}


// @@protoc_insertion_point(global_scope)
